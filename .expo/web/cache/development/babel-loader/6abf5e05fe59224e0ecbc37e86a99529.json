{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\nexport default registerForPushNotificationsAsync = function registerForPushNotificationsAsync() {\n  var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context.sent;\n          console.log('token token', token);\n          return _context.abrupt(\"return\", token);\n\n        case 22:\n          alert('Must use physical device for Push Notifications');\n\n        case 23:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/vincentcastigliola/Work/WhyWakeUp/wake-up-now/notifications.js"],"names":["Permissions","Notifications","axios","Constants","registerForPushNotificationsAsync","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":";;AACA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,eAAgBC,iCAAiC,GAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAC5CD,SAAS,CAACE,QADkC;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAEHL,WAAW,CAACM,QAAZ,CAAqBN,WAAW,CAACO,aAAjC,CAFG;;AAAA;AAAA;AAE5BC,UAAAA,cAF4B,yBAEpCC,MAFoC;AAGxCC,UAAAA,WAHwC,GAG1BF,cAH0B;;AAAA,gBAIxCA,cAAc,KAAK,SAJqB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAKfR,WAAW,CAACW,QAAZ,CAAqBX,WAAW,CAACO,aAAjC,CALe;;AAAA;AAAA;AAKhCE,UAAAA,MALgC,yBAKhCA,MALgC;AAMxCC,UAAAA,WAAW,GAAGD,MAAd;;AANwC;AAAA,gBAQxCC,WAAW,KAAK,SARwB;AAAA;AAAA;AAAA;;AASxCE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AATwC;;AAAA;AAAA;AAAA,2CAYxBX,aAAa,CAACY,qBAAd,EAZwB;;AAAA;AAYtCC,UAAAA,KAZsC;AAa5CC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,KAA3B;AAb4C,2CAcrCA,KAdqC;;AAAA;AAgB5CF,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AAhB4C;AAmBhD,cAAIK,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3BjB,YAAAA,aAAa,CAACkB,2BAAd,CAA0C,SAA1C,EAAqD;AACjDC,cAAAA,IAAI,EAAE,SAD2C;AAEjDC,cAAAA,UAAU,EAAEpB,aAAa,CAACqB,iBAAd,CAAgCC,GAFK;AAGjDC,cAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAH+B;AAIjDC,cAAAA,UAAU,EAAE;AAJqC,aAArD;AAMH;;AA1B+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApD","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\n\nexport default  registerForPushNotificationsAsync = async () => {\n    if (Constants.isDevice) {\n        const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n        let finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n            const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n            finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n            alert('Failed to get push token for push notification!');\n            return;\n        }\n        const token = await Notifications.getExpoPushTokenAsync();\n        console.log('token token', token);\n        return token;\n    } else {\n        alert('Must use physical device for Push Notifications');\n    }\n\n    if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n            name: 'default',\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#FF231F7C',\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}