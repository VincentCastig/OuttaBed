{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/vincentcastigliola/Work/WhyWakeUp/wake-up-now/screens/EditTime.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\nexport default function EditScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(new Date(1598051730000)),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState('time'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      show = _useState6[0],\n      setShow = _useState6[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode('time');\n  };\n\n  var newDate = route.params.newDate;\n  axios.post(\"http://localhost:3000/create-user\", {\n    device_time: date,\n    device_id: Constants.deviceId\n  }).then(function (res) {\n    return console.log(res);\n  }).catch(function (error) {\n    return console.log(error);\n  });\n\n  if (typeof newDate == \"number\") {\n    date = new Date(newDate);\n    route.params = \"\";\n    console.log('new date ', date);\n  }\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    style: {\n      fontSize: 20,\n      color: 'green'\n    },\n    styleDisabled: {\n      color: 'red'\n    },\n    title: \"Save\",\n    onPress: function onPress() {\n      return navigation.navigate(\"Home\", {\n        date: Date.parse(date)\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  })), React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    timeZoneOffsetInMinutes: 0,\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }));\n}\n;","map":{"version":3,"sources":["/Users/vincentcastigliola/Work/WhyWakeUp/wake-up-now/screens/EditTime.js"],"names":["React","useState","DateTimePicker","axios","Constants","EditScreen","route","navigation","Date","date","setDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","showMode","currentMode","showDatepicker","showTimepicker","newDate","params","post","device_time","device_id","deviceId","then","res","console","log","catch","error","fontSize","color","navigate","parse"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,UAAT,OAAyC;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAAA,kBAChCN,QAAQ,CAAC,IAAIO,IAAJ,CAAS,aAAT,CAAD,CADwB;AAAA;AAAA,MACjDC,IADiD;AAAA,MAC3CC,OAD2C;;AAAA,mBAE9BT,QAAQ,CAAC,MAAD,CAFsB;AAAA;AAAA,MAE/CU,IAF+C;AAAA,MAEzCC,OAFyC;;AAAA,mBAG9BX,QAAQ,CAAC,KAAD,CAHsB;AAAA;AAAA,MAG/CY,IAH+C;AAAA,MAGzCC,OAHyC;;AAKtD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,YAAR,EAAyB;AACxC,QAAMC,WAAW,GAAGD,YAAY,IAAIR,IAApC;AACAK,IAAAA,OAAO,CAACK,QAAQ,CAACC,EAAT,KAAgB,KAAjB,CAAP;AACAV,IAAAA,OAAO,CAACQ,WAAD,CAAP;AACD,GAJD;;AAMA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAC,WAAW,EAAI;AAC9BR,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,IAAAA,OAAO,CAACU,WAAD,CAAP;AACD,GAHD;;AAKA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BF,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,GAFD;;AAIA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BH,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,GAFD;;AApBsD,MAwBhDI,OAxBgD,GAwBpCnB,KAAK,CAACoB,MAxB8B,CAwBhDD,OAxBgD;AA0BtDtB,EAAAA,KAAK,CAACwB,IAAN,sCAAgD;AAACC,IAAAA,WAAW,EAAEnB,IAAd;AAAoBoB,IAAAA,SAAS,EAAEzB,SAAS,CAAC0B;AAAzC,GAAhD,EAAoGC,IAApG,CAAyG,UAAAC,GAAG;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,GAA5G,EAAkIG,KAAlI,CAAwI,UAAAC,KAAK;AAAA,WAAIH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAAJ;AAAA,GAA7I;;AAEA,MAAG,OAAOX,OAAP,IAAkB,QAArB,EAA+B;AAC7BhB,IAAAA,IAAI,GAAG,IAAID,IAAJ,CAASiB,OAAT,CAAP;AACAnB,IAAAA,KAAK,CAACoB,MAAN,GAAe,EAAf;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBzB,IAAzB;AACD;;AAMD,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,MAAD;AACU,IAAA,KAAK,EAAE;AAAC4B,MAAAA,QAAQ,EAAE,EAAX;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KADjB;AAEU,IAAA,aAAa,EAAE;AAACA,MAAAA,KAAK,EAAE;AAAR,KAFzB;AAGU,IAAA,KAAK,EAAC,MAHhB;AAIU,IAAA,OAAO,EAAE;AAAA,aAAM/B,UAAU,CAACgC,QAAX,CAAoB,MAApB,EAA4B;AAAE9B,QAAAA,IAAI,EAAED,IAAI,CAACgC,KAAL,CAAW/B,IAAX;AAAR,OAA5B,CAAN;AAAA,KAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,EAUI,oBAAC,cAAD;AACE,IAAA,MAAM,EAAC,gBADT;AAEE,IAAA,uBAAuB,EAAE,CAF3B;AAGE,IAAA,KAAK,EAAEA,IAHT;AAIE,IAAA,IAAI,EAAEE,IAJR;AAKE,IAAA,QAAQ,EAAE,IALZ;AAME,IAAA,OAAO,EAAC,SANV;AAOE,IAAA,QAAQ,EAAEI,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADF;AAuBD;AAAA","sourcesContent":["import React, {useState} from 'react';\nimport {View, Button, Platform} from 'react-native';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport axios from 'axios';\nimport Constants from 'expo-constants';\n\nexport default function EditScreen({route, navigation}) {\n  let [date, setDate] = useState(new Date(1598051730000));\n  const [mode, setMode] = useState('time');\n  const [show, setShow] = useState(false);\n\n  const onChange = (event, selectedDate) => {\n    const currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setDate(currentDate);\n  };\n\n  const showMode = currentMode => {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  const showDatepicker = () => {\n    showMode('date');\n  };\n\n  const showTimepicker = () => {\n    showMode('time');\n  };\n\n  let { newDate } = route.params;\n\n  axios.post(`http://localhost:3000/create-user`, {device_time: date, device_id: Constants.deviceId}).then(res => console.log(res)).catch(error => console.log(error));\n\n  if(typeof newDate == \"number\") {\n    date = new Date(newDate);\n    route.params = \"\";\n    console.log('new date ', date)\n  }\n\n  // console.log(\"newDate \", newDate);\n  // console.log(\"date \", date);\n\n\n  return (\n    <View>\n      <View>\n      <Button\n                style={{fontSize: 20, color: 'green'}}\n                styleDisabled={{color: 'red'}}\n                title=\"Save\"\n                onPress={() => navigation.navigate(\"Home\", { date: Date.parse(date)})}\n        />\n      </View>\n      {/* {show && ( */}\n        <DateTimePicker\n          testID=\"dateTimePicker\"\n          timeZoneOffsetInMinutes={0}\n          value={date}\n          mode={mode}\n          is24Hour={true}\n          display=\"default\"\n          onChange={onChange}\n        />\n      {/* )} */}\n    </View>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}